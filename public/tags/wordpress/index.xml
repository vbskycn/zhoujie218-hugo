<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wordpress on 周杰个人博客</title><link>/tags/wordpress/</link><description>Recent content in Wordpress on 周杰个人博客</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 31 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/wordpress/index.xml" rel="self" type="application/rss+xml"/><item><title>如何为WordPress网站正确地配置Cloudflare</title><link>/archives/2580.html</link><pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate><guid>/archives/2580.html</guid><description>&lt;p&gt;通过在您的站点前充当[反向代理]，Cloudflare是一种一体化的安全和性能产品，被全球超过12%的网站使用。作为WordPress 用户，将Cloudflare添加到您的网站有助于提高网站性能并减少恶意机器人和黑客的影响。&lt;/p&gt;
&lt;p&gt;正确配置后，对您站点的所有请求将首先到达Cloudflare服务器，然后该服务器将确定是否应将请求转发到源服务器、从缓存中提供服务、阻止或使用自定义规则进行处理。&lt;/p&gt;
&lt;p&gt;在本指南中，我们将深入探讨WordPress的最佳Cloudflare设置，讨论缓存和安全设置，并向您展示如何为WordPress多站点安装配置Cloudflare 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;如何为WordPress配置Cloudflare&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare WordPress插件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WordPress的Cloudflare自动平台优化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare Argo和Railgun&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何为WordPress多站点配置Cloudflare&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="如何为wordpress配置cloudflare"&gt;如何为WordPress配置Cloudflare&lt;/h3&gt;
&lt;p&gt;Cloudflare提供了多种安全和性能优势，但并非所有这些优势都与WordPress完全兼容。让我们深入了解Cloudflare的设置，以确定适合您的WordPress网站的最佳功能。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SSL&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防火墙&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="ssl"&gt;SSL&lt;/h4&gt;
&lt;p&gt;Cloudflare支持四种SSL/TLS加密模式——Off, Flexible, Full和Full (Strict)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**Off –**不加密。&lt;/li&gt;
&lt;li&gt;**Flexible –**仅加密浏览器和Cloudflare之间的连接。&lt;/li&gt;
&lt;li&gt;**Full –**端到端加密，但允许在源服务器上使用自签名证书。&lt;/li&gt;
&lt;li&gt;**Ful (Strict) –**端到端加密，需要来自Cloudflare的免费原始证书或来自受信任CA（证书颁发机构）的证书。我们建议使用Full (Strict) SSL模式以获得最大的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于希望在其WordPress网站上使用Cloudflare的用户，我们建议&lt;a href="https://www.wbolt.com/how-to-install-ssl-certificate.html"&gt;在宝塔面板中生成免费的Let’s Encrypt SSL证书&lt;/a&gt;，并在Cloudflare中使用Full或Full (Strict) 选项。&lt;/p&gt;
&lt;p&gt;或者，您还可以生成Cloudflare原始证书以安装在您的原始服务器上。如果您的主机不提供免费的SSL证书，则在您的服务器上安装Cloudflare原始证书将允许您使用Full (Strict) SSL模式。&lt;/p&gt;
&lt;p&gt;如果您使用在子域上托管站点，而根域使用Cloudflare的Flexible SSL，则可以使用Cloudflare页面规则强制子域使用Full或Full (Strict) SSL。&lt;/p&gt;
&lt;p&gt;
 &lt;a data-fancybox="gallery" href="https://img-cloud.zhoujie218.top/2023/12/31/65917a247f948.webp"&gt;
 &lt;img class="mx-auto" alt="" src="https://img-cloud.zhoujie218.top/2023/12/31/65917a247f948.webp" /&gt;
 &lt;/a&gt;
 &lt;/p&gt;
&lt;p&gt;为具有Cloudflare页面规则的子域启用Full (Strict) SSL&lt;/p&gt;
&lt;p&gt;此选项允许您使用Cloudflare的Flexible SSL，同时确保子域的Cloudflare Full (Strict) SSL。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;始终使用HTTPS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们建议启用此选项以自动&lt;a href="https://www.wbolt.com/redirect-http-to-https.html"&gt;将所有HTTP请求转发到HTTPS&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HSTS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HSTS代表“HTTP Strict Transport Security”，用于强制Web浏览器使用安全的HTTPS连接。在Cloudflare上启用HSTS可确保&lt;a href="https://www.wbolt.com/make-fewer-http-requests.html"&gt;HTTP请求&lt;/a&gt;永远不会到达您的源服务器。如果您的站点已设置为使用HTTPS，我们建议您也在源服务器上&lt;a href="https://www.wbolt.com/hsts-strict-transport-security.html"&gt;配置HSTS&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最低TLS版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.wbolt.com/tls-1-3.html"&gt;TLS（传输层安全性）&lt;/a&gt;是一种加密协议，允许通过网络安全传输数据。默认情况下，Cloudflare为协议版本设置TLS 1.0。某些安全标准（例如 PCI DSS 3.2）需要更新版本的TLS协议以实现合规性。如果您的站点需要某个TLS版本，您可以通过转到&lt;strong&gt;SSL/TLS &amp;gt; Edge Certificates &amp;gt; Minimum TLS Version&lt;/strong&gt;来更改设置。&lt;/p&gt;</description></item><item><title>完美迁移博客从wordpress到hugo</title><link>/archives/2461.html</link><pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate><guid>/archives/2461.html</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;博客写了很多年，都没有写出什么有技术含量的文章。网络互联，你抄我也抄：） 这篇文章也是借鉴网友的 下面有他的链接完美从wordpress转到hugo&lt;/p&gt;
&lt;h2 id="网站情况简介"&gt;网站情况简介&lt;/h2&gt;
&lt;p&gt;开始介绍迁移过程之前，我先简单说一下我网站的基本情况供大家参考。如果大家网站情况和我一样，那完全可以采用跟我相同的迁移方案。 笔者从 06 年开始学做网站，那个时候还是im286 的时代。以前一直转战于各种免费空间，各种程序，体验的是那种安装折腾的过程，现在年纪大了，折腾不动了，就想越简单越好。本人没有什么技术，只是出于业余爱好，喜欢捣鼓一些网页程序之类的东东。3年前入手阿里云ESC，域名也备案了，也就绑在阿里了，也不想天天给网站搬家，真的是一件累人的事！&lt;/p&gt;
&lt;p&gt;前几天看到一个博客特别漂亮，折腾之火熊熊燃烧。一路baidu过来，发现是静态博客hexo 。现在还可以结合cloudfare pages,netlifi,vercel ，github，这些国外大厂提供网站托管，cdn,免费，速度也不错。 最终我选的是cloudfare pages + github +hugo 因为cf不支持hexo集成,后面又研究hugo，有集成的更简单，鼠标键盘点点点，几分钟就建好了一个网站，更新也方便，写好文章，用github推上去，网站就自动更新了。&lt;/p&gt;
&lt;h2 id="建一个网站的流程"&gt;建一个网站的流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fork好喜欢的主题仓库&lt;/li&gt;
&lt;li&gt;设置好网站信息，设置好cloudfare pages&lt;/li&gt;
&lt;li&gt;github推送，OK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原来我用的程序是wordpress,虽然没有写出什么技术文章，但是也有100多篇，也算是回忆吧。丢是不能丢的，转格式吧 baiduing&amp;hellip;.. 找了很多方法，下面这个是最完美的。 我们要迁移文章，还有图片。图床迁移实际上并不是一件容易的事情，因为目前所有的迁移工具都是只能&lt;strong&gt;识别 markdown 语法&lt;/strong&gt;的图片链接而不是&lt;strong&gt;html 标签&lt;/strong&gt;里面的链接。这就导致我们必须将 Wordpress 中的所有文章全部转成&lt;strong&gt;markdown 语法&lt;/strong&gt;。 最后一个问题就是保证文章的链接迁移前后没有变化，这样就可以保证拥有旧链接的人们可以正常访问。 综上，我们需要解决三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析 Wordpress 备份的 &amp;ldquo;XML&amp;rdquo; 为拥有 markdown 语法的 &amp;ldquo;.md&amp;rdquo; 文件；&lt;/li&gt;
&lt;li&gt;图床迁移；&lt;/li&gt;
&lt;li&gt;固定链接。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="方案对比"&gt;方案对比&lt;/h2&gt;
&lt;p&gt;当然，我们可以直接选择官网给出的方案&lt;a href="https://gohugo.io/tools/migrations/"&gt;Migrate to Hugo&lt;/a&gt;。对于 wordpress，主要有以下几种。 
 &lt;a data-fancybox="gallery" href="https://img-cloud.zhoujie218.top/piggo/202208011522171.png"&gt;
 &lt;img class="mx-auto" alt="image.png" src="https://img-cloud.zhoujie218.top/piggo/202208011522171.png" /&gt;
 &lt;/a&gt;
 &lt;/p&gt;
&lt;p&gt;这几种方案我都尝试过，各有优势却都不完美。以下是详细说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/SchumacherFM/wordpress-to-hugo-exporter"&gt;wordpress-to-hugo-exporter&lt;/a&gt;： 可以导出，且文件名称就是带有日期和中文的标题名称。但是不是原生 markdown 格式。而是如下图所示的结构。不满足需求 1，2，所以&lt;strong&gt;排除&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;exitwp-for-hugo: 原始仓库是用 python2.x 写的，但是有人完善了 python3.x 的版本。这个程序可以将 Wordpress 的 xml 文件转成 markdown 语法的 md 文件，但是文件名太乱。（因为标题中包含了中文，所以这个程序会自动将中文转成 unicode 编码然后用它作为文件名储存在电脑中）
 &lt;a data-fancybox="gallery" href="https://img-cloud.zhoujie218.top/2024/04/22/6626037f5b5f3.png"&gt;
 &lt;img class="mx-auto" alt="image.png" src="https://img-cloud.zhoujie218.top/2024/04/22/6626037f5b5f3.png" /&gt;
 &lt;/a&gt;
 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wooni005/exitwp-for-hugo"&gt;exitwp-for-hugo&lt;/a&gt;: 原始仓库是用 python2.x 写的，但是有人完善了 python3.x 的版本。这个程序可以将 Wordpress 的 xml 文件转成 markdown 语法的 md 文件，但是文件名太乱。（因为标题中包含了中文，所以这个程序会自动将中文转成 unicode 编码然后用它作为文件名储存在电脑中）
 &lt;a data-fancybox="gallery" href="https://img-cloud.zhoujie218.top/2024/04/22/6626037fa9c14.png"&gt;
 &lt;img class="mx-auto" alt="image.png" src="https://img-cloud.zhoujie218.top/2024/04/22/6626037fa9c14.png" /&gt;
 &lt;/a&gt;
 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/palaniraja/blog2md"&gt;blog2md&lt;/a&gt;: 与&lt;a href="https://github.com/wooni005/exitwp-for-hugo"&gt;exitwp-for-hugo&lt;/a&gt;类似，文件名太乱且不包含日期。
 &lt;a data-fancybox="gallery" href="https://img-cloud.zhoujie218.top/2024/04/22/6626037fa20bd.png"&gt;
 &lt;img class="mx-auto" alt="image.png" src="https://img-cloud.zhoujie218.top/2024/04/22/6626037fa20bd.png" /&gt;
 &lt;/a&gt;
 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nantipov/wordhugopress"&gt;wordhugopress&lt;/a&gt;: java 写的程序，对于新手不太友好，但是也可以基于 Wordpress 博客中的文章生成 markdown 语法的 md 文件。需要配置数据库用户名和密码，而且最后生成的目录结构很乱。
 &lt;a data-fancybox="gallery" href="https://img-cloud.zhoujie218.top/2024/04/22/6626037f54bc2.png"&gt;
 &lt;img class="mx-auto" alt="image.png" src="https://img-cloud.zhoujie218.top/2024/04/22/6626037f54bc2.png" /&gt;
 &lt;/a&gt;
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后突然发现一个仓库&lt;a href="https://github.com/AvantaR/wordpress-export-to-markdown"&gt;wordpress-export-to-markdow_L 版&lt;/a&gt;，这个只需要自己在电脑上安装 node.js 环境，然后就可以直接运行了。它可以解决除&lt;strong&gt;固定链接&lt;/strong&gt;以外的所有问题，是一个近乎完美的方案。基于 L 版，&lt;a href="https://github.com/AvantaR"&gt;AvantaR&lt;/a&gt;，在 markdown 的 yaml 头文件中添加了&lt;strong&gt;slug&lt;/strong&gt;参数，详细实现见该仓库&lt;a href="https://github.com/AvantaR/wordpress-export-to-markdown"&gt;wordpress-export-to-markdow_A 版&lt;/a&gt;。 实际上&lt;strong&gt;slug&lt;/strong&gt;和&lt;strong&gt;url&lt;/strong&gt;还是有区别的。以下面这个 yaml 头和网站https://img-cloud.zhoujie218.top/archives/1018.html为例：&lt;/p&gt;</description></item><item><title>WordPress SEO指南</title><link>/archives/2355.html</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/archives/2355.html</guid><description>&lt;h1 id="wordpress-seo指南"&gt;WordPress SEO指南&lt;/h1&gt;
&lt;p&gt;WordPress应该是被使用最多的CMS系统，记得以前看到过报道，全世界20%以上的网站用的是WP。虽然最初是作为博客写作CMS发布的，但现在不仅博客使用，新闻、杂志、门户类网站也用，简单的电子商务网站也能用WP，最近越来越多企业网站也开始使用WordPress。&lt;/p&gt;
&lt;p&gt;WordPress的优势太多了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源、免费但功能强大&lt;/li&gt;
&lt;li&gt;内容层和展现层分离，因而模板极为丰富，又可以用于各种类型网站&lt;/li&gt;
&lt;li&gt;简单、灵活、开放、标准化，有强大的插件库，实现各种功能&lt;/li&gt;
&lt;li&gt;安装简单，使用也很简单&lt;/li&gt;
&lt;li&gt;版本更新频繁，但升级十分简单&lt;/li&gt;
&lt;li&gt;开发者社群规模够大，某项功能即使不会做又找不到插件，也能找到开发者帮你写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然WordPress并不能说是完美搜索引擎友好的，但至少是友好度非常高的CMS之一，在各种插件帮助下和适当设置后， WordPress搭建的网站是可以做到比较完美SEO的。&lt;/p&gt;
&lt;p&gt;这篇WordPress SEO指南就简单讨论一下优化WordPress网站的几个要素。相同的考虑也适用于其它博客系统。这里只谈技术性优化，关于博客的运营、市场研究、文章写作等问题，可以参考以前翻译的博客SEO指南。&lt;/p&gt;
&lt;p&gt;
 &lt;a data-fancybox="gallery" href="https://img-cloud.zhoujie218.top/2024/06/20/6673a63c77d9f.png"&gt;
 &lt;img class="mx-auto" alt="image-20240620114704061" src="https://img-cloud.zhoujie218.top/2024/06/20/6673a63c77d9f.png" /&gt;
 &lt;/a&gt;
 &lt;/p&gt;
&lt;h2 id="标题标签和描述标签"&gt;标题标签和描述标签&lt;/h2&gt;
&lt;p&gt;老版WordPress的缺省帖子标题标签是这个格式的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;博客名称 – 帖子标题&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;需要改为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;帖子标题 – 博客名称&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这个修改通常是由下面推荐安装的SEO插件自动实现的，几个流行的WP SEO插件都一定有这个功能。不安装插件的话，也可以在模板文件中自己修改，以前我刚刚开始用WordPress写博客时还没有现在这些插件，都是自己修改模板，在所用模板的header.php文件中，wp_title（帖子标题）和bloginfo(‘name’) （博客名称）两个顺序调换一下就行了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt; title &amp;gt;&amp;lt; ? php wp_title(); ? &amp;gt; – &amp;lt; ? php bloginfo(‘name’); ? &amp;gt; &amp;lt; /title&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;或者bloginfo(‘name’)也可以直接硬编码，写上博客名称，少一次php执行，还能写成与设置的博客名称不一样的。&lt;/p&gt;
&lt;p&gt;描述标签就是写帖子时摘要（Excerpt）中填写的内容，这个摘要内容也就是首页、栏目页帖子标题下面的简短介绍文字。通常我会从帖子前两段文字中摘一两句话，并在文字上稍微改动一下，尽量避免首页、栏目页和实际帖子页面的重复内容。&lt;/p&gt;
&lt;p&gt;如果安装了SEO插件，可以单独写不同于摘要的描述标签，一般我不使用，没有太大必要。&lt;/p&gt;
&lt;p&gt;关键词标签可以直接删除，不管对用户还是对搜索引擎，目前都没用，以后也看不出变得有用的可能性。&lt;/p&gt;
&lt;h2 id="文章内部链接"&gt;文章内部链接&lt;/h2&gt;
&lt;p&gt;两种情况，一是文章结尾处或侧栏中显示的相关帖子，这个肯定是插件实现，比如我用的是&lt;a href="https://wordpress.org/plugins/wordpress-23-related-posts-plugin/"&gt;Related Post&lt;/a&gt;。相关文章对用户和搜索引擎都有好处，几乎是必须的设置。通常设定显示5-10篇相关文章。&lt;/p&gt;
&lt;p&gt;二是贴子正文中链接到其它相关帖子，是&lt;a href="https://www.seozac.com/seo-tips/internal-links/"&gt;站内链接优化&lt;/a&gt;的重要部分。我博客里用的比较多，有很多读者也问过我是怎么加的帖子内链接，看到网上有人说我肯定是用插件，其实不是，我就是人工加的。也有插件可以实现，自动在指定关键词加上指定链接， 如&lt;a href="https://wordpress.org/plugins/seo-automatic-links/"&gt;SEO Smart Links&lt;/a&gt;，不过我并不建议，虽然插件可以设置一组关键词，可以限制生成链接的次数，但还是不可能像人工那样灵活、自然。人工加基本上是随机的，所以也是最自然的。&lt;/p&gt;
&lt;p&gt;人工加内部链接时重要的规则就是别给自己设定规则，不要脑子里有一根弦：“遇到这个关键词，我要链接到这里，每篇帖子只加一次。”我的做法就是随便加，想起来觉得合适就加，没想起来就不加。&lt;/p&gt;
&lt;h2 id="网站地图"&gt;网站地图&lt;/h2&gt;
&lt;p&gt;XML版网站地图是必须要有的，也有插件可以实现，如我用的 &lt;a href="https://wordpress.org/plugins/google-sitemap-generator/"&gt;Google XMLSitemaps&lt;/a&gt;，虽然名字里带Google，但生成的sitemaps是所有搜索引擎通用的。Sitemap插件很多，基本上都一样。&lt;/p&gt;
&lt;p&gt;网页版网站地图没有太大必要，可放可不放。其它类型网站也同样，网站结构没问题的话，是否放页面版网站地图，视用户体验而定，不用考虑SEO。&lt;/p&gt;
&lt;h2 id="模板的选择和修改"&gt;模板的选择和修改&lt;/h2&gt;
&lt;p&gt;WP官网有大量模板可以下载，搜索“wordpress模板”，也有很多免费、付费的模板网站。选择模板时建议考虑几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好看，设计风格符合行业。我个人喜欢简单的视觉设计，如读者所见，所有图片我都给删了&lt;/li&gt;
&lt;li&gt;必须是响应式设计&lt;/li&gt;
&lt;li&gt;必须有面包屑导航&lt;/li&gt;
&lt;li&gt;功能尽量简单，代码简洁，打开速度快&lt;/li&gt;
&lt;li&gt;页面代码如H1、H2标签等使用正确，如帖子标题应该是H1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择好模板后通常还得修修补补，所以懂点编程，虽然不是SEO一定要会的，但是有很大帮助，对个人站长是必不可缺的，一点不懂PHP，想改模板都无法下手。&lt;/p&gt;</description></item><item><title>如何设置WordPress文章特色图像(Featured Image)</title><link>/archives/213.html</link><pubDate>Fri, 17 Jun 2016 00:00:00 +0000</pubDate><guid>/archives/213.html</guid><description>&lt;p&gt;在主题的functions.php中添加如下代码&lt;/p&gt;
&lt;table border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;p class="line number1 index0 alt2"&gt;1&lt;/p&gt;&lt;p class="line number2 index1 alt1"&gt;2&lt;/p&gt;&lt;p class="line number3 index2 alt2"&gt;3&lt;/p&gt;&lt;p class="line number4 index3 alt1"&gt;4&lt;/p&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;p class="line number1 index0 alt2"&gt;&lt;code class="php comments"&gt;//使WordPress支持post thumbnail&lt;/code&gt;&lt;/p&gt;&lt;p class="line number2 index1 alt1"&gt;&lt;code class="php keyword"&gt;if&lt;/code&gt; &lt;code class="php plain"&gt;( function_exists( &lt;/code&gt;&lt;code class="php string"&gt;'add_theme_support'&lt;/code&gt; &lt;code class="php plain"&gt;) ) {&lt;/code&gt;&lt;/p&gt;&lt;p class="line number3 index2 alt2"&gt;&lt;code class="php spaces"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;&lt;code class="php plain"&gt;add_theme_support( &lt;/code&gt;&lt;code class="php string"&gt;'post-thumbnails'&lt;/code&gt; &lt;code class="php plain"&gt;);&lt;/code&gt;&lt;/p&gt;&lt;p class="line number4 index3 alt1"&gt;&lt;code class="php plain"&gt;}&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;**注意：**这段代码应当加载functions.php的body中，不要写进函数里。&lt;/p&gt;
&lt;table border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;p class="line number1 index0 alt2"&gt;1&lt;/p&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;p class="line number1 index0 alt2"&gt;&lt;code class="php plain"&gt;add_image_size( &lt;/code&gt;&lt;code class="php variable"&gt;$name&lt;/code&gt;&lt;code class="php plain"&gt;, &lt;/code&gt;&lt;code class="php variable"&gt;$width&lt;/code&gt;&lt;code class="php plain"&gt;, &lt;/code&gt;&lt;code class="php variable"&gt;$height&lt;/code&gt;&lt;code class="php plain"&gt;, &lt;/code&gt;&lt;code class="php variable"&gt;$crop&lt;/code&gt; &lt;code class="php plain"&gt;);&lt;/code&gt;&lt;/p&gt;</description></item></channel></rss>